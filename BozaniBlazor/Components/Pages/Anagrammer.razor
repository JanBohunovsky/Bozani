@page "/anagrammer"
@using BozaniBlazor.Common
@using BozaniBlazor.Components.Common
@rendermode InteractiveServer

<PageTitle>Anagrammer - Božani!!!</PageTitle>

<h1>Anagrammer</h1>

<div class="d-flex gap-3 flex-column">
    <div class="d-flex flex-column">
        <label for="letters">Characters:</label>
        <input type="text" id="letters" class="form-control" @bind="letters">
    </div>

    <div class="d-flex flex-column">
        <label for="unknownChars">Unknown characterss:</label>
        <input type="number" id="unknownChars" @bind="numberOfUnknownChars" min="0" max="10" step="1" class="form-control"/>
    </div>

    <div class="d-flex flex-column">
        <label for="numberOfWords">Number of words:</label>
        <input type="number" id="numberOfWords" disabled @bind="numberOfWords" min="1" max="3" step="1" class="form-control"/>
    </div>

    <button class="btn btn-primary" disabled="@processing" @onclick="FindAsync">
        @if (processing)
        {
            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
            <span role="status">Processing...</span>
        }
        else
        {
            <span>Find</span>
        }
    </button>

    <table style="max-width: 100vw" class="table">
        <thead>
        <tr>
            <th>Words</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var result in words)
        {
            <tr>
                <td>@result</td>
            </tr>
        }
        </tbody>
    </table>

    @if (message is not null)
    {
        <Alert Text="@message.Text" Severity="message.Severity"/>
    }
</div>


@code {

    private Message? message;
    private bool processing = false;

    private string letters = "";
    private List<string> words = [];
    private int numberOfUnknownChars = 0; // Default value
    private int numberOfWords = 1; // Default value

    private async Task FindAsync()
    {
        processing = true;
        words = [];

        try
        {
            message = await FindCoreAsync();
        }
        catch (Exception e)
        {
            message = Message.Danger($"Exception has occured:\n{e}");
        }
        finally
        {
            processing = false;
        }
    }

    private async Task<Message?> FindCoreAsync()
    {
        var foundWords = new HashSet<string>();
        if (letters.Length <= 0 && numberOfUnknownChars == 0)
        {
            return Message.Information("Please enter at least one character or specify the number of unknown characters.");
        }

        var dict = new Dictionary<char, int>();
        foreach (var letter in letters.ToLower())
        {
            dict.TryAdd(letter, 0);
            dict[letter]++;
        }

        await foreach (var word in GetWordsAsync())
        {
            if (word.Length != letters.Length + numberOfUnknownChars)
                continue;

            var ok = true;
            foreach (var (letter, count) in dict)
            {
                if (word.Count(x => x == letter) >= count)
                    continue;

                ok = false;
                break;
            }

            if (ok)
                foundWords.Add(word);
        }

        words = foundWords.OrderBy(x => x).ToList();
        if (words.Count == 0)
        {
            return Message.Warning("No words found.");
        }

        return null;
    }

    private async IAsyncEnumerable<string> GetWordsAsync()
    {
        var path = Path.Combine(Environment.CurrentDirectory, "wwwroot", "data", "vsechnaSlovaBezDiakritiky.txt");
        if (!File.Exists(path))
            throw new FileNotFoundException("Failed to load dictionary file", path);

        using var reader = new StreamReader(path);
        while (await reader.ReadLineAsync() is { } line)
        {
            yield return line;
        }
    }

}